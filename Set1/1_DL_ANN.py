# -*- coding: utf-8 -*-
"""DL_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EFRxE9lyiQf5TTyp_HXwaSGMk32xVy_O

    Program to predict lung cancer using Artificial Neural Network
"""

import tensorflow as tf

import pandas as pd

df = pd.read_csv("/Users/bibinkunjumon/Downloads/Programs/lung_cancer_examples.csv")

df.head(5)

df.drop(['Name','Surname'],axis=1,inplace=True)

df.head(5)

X = df.drop('Result',axis=1)
y = df['Result']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.70,random_state=42)

from sklearn.preprocessing import MinMaxScaler
scalar = MinMaxScaler() # While using min max scalar X train is scaled using its average and X test scaled using thats average.
X_train_scaled = scalar.fit_transform(X_train)
X_test_scaled = scalar.fit_transform(X_test)

# Initialising ANN
ann =tf.keras.models.Sequential()  # Choosing Sequential ANN

# First Hidden Layer
ann.add(tf.keras.layers.Dense(6,activation='relu')) # 6 Nodes

# Second Hidden Layer
ann.add(tf.keras.layers.Dense(6,activation='relu'))

# Adding output layer
ann.add(tf.keras.layers.Dense(1,activation='sigmoid'))

# Compiling ANN
ann.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#ann.summary()

print("********  Shape of X_train : ",X_train_scaled.shape)

ann.fit(X_train_scaled,y_train,batch_size=10,epochs=100)

y_pred = ann.predict(X_test_scaled)
print(" ******** Y predicted using ANN : ",y_pred)

pred_sample = ann.predict(scalar.transform([[30,0,5,2]]))

print("********* predicted output : ",pred_sample)

# To convert into our expected output 0 or 1
if (pred_sample>0.5):
  print("******** Output : 1")
else:
  print("******** Output : 0")

print("********  ANN Summary ")
ann.summary()

ann.evaluate(X_test_scaled,y_test)